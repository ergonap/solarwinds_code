<#------------- FUNCTIONS -------------#>
Function Set-SwisConnection {  
    Param(  
        [Parameter(Mandatory=$true, HelpMessage = "What SolarWinds server are you connecting to (Hostname or IP)?" ) ] [string] $solarWindsServer,  
        [Parameter(Mandatory=$true, HelpMessage = "Do you want to use the credentials from PowerShell [Trusted], or a new login [Explicit]?" ) ] [ ValidateSet( 'Trusted', 'Explicit' ) ] [ string ] $connectionType,  
        [Parameter(HelpMessage = "Which credentials should we use for an explicit logon type" ) ] $creds
    )  
     
    IF ( $connectionType -eq 'Trusted'  ) {  
        $swis = Connect-Swis -Trusted -Hostname $solarWindsServer  
    } ELSEIF(!$creds) {  
        $creds = Get-Credential -Message "Please provide a Domain or Local Login for SolarWinds"  
        $swis = Connect-Swis -Credential $creds -Hostname $solarWindsServer  
    } ELSE {
        $swis = Connect-Swis -Credential $creds -Hostname $solarWindsServer  
    } 

    RETURN $swis  
}  

<#------------- ACTUAL SCRIPT -------------#>
clear-host

$now = Get-Date -Format "yyyyMMdd_HHmm"
$script = $MyInvocation.MyCommand
if($script.path){ $dir = Split-Path $script.path }
else { $dir = [Environment]::GetFolderPath("Desktop") }
$Logfile = "$dir\$($script.name)_$now.log"

Start-Transcript -Path $Logfile -Append -IncludeInvocationHeader

[void] [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") 

while(!$swistest) {
    $hostname = Read-Host -Prompt "What server should we connect to?" 
    $connectionType = Read-Host -Prompt "Should we use the current powershell credentials [Trusted], or specify credentials [Explicit]?" 
    $swis = Set-SwisConnection $hostname $connectionType
    $swistest = get-swisdata $swis "SELECT TOP 1 servername FROM Orion.Websites"
}
$swistest = $null

"Connected to $hostname Successfully using $connectiontype credentials"

$quit = $null
while ($quit -ne "Quit" ) {

    "`nPlease provide the file to import"
    $quit = Read-Host 'Press Enter to select file to import, or type [Quit] to exit'
    switch -regex ($quit) {
        "quit" { "`n`nQuitting"; $quit="Quit" ; break}
            
        default {
            $inputFile = $null
            $openFileDialog = New-Object -TypeName System.Windows.Forms.OpenFileDialog
            $openFileDialog.Filter = "XML Files (*.xml)|*.xml|All Files (*.*)|*.*"
            $openFileDialog.Title = "Select the XML file to import"
            
            if ($openFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
                $inputFile = $openFileDialog.FileName
                "Selected file: $inputFile"

                # Example insertion point for Import-ModernDashboard
                "Importing Modern Dashboard from $inputFile"
                Import-ModernDashboard -SwisConnection $swis -Path $inputFile
            } else {
                "No file selected. Please select a file to proceed."
            }
        }
    }
}

"Finished"

Stop-Transcript
